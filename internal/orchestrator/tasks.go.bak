package orchestrator

import (
	"log"
	"strconv"
	"strings"
	"sync"

	"github.com/GGmuzem/yandex-project/pkg/models"
)

// TaskManager управляет задачами и выражениями
type TaskManager struct {
	Expressions     map[string]*models.Expression // Карта выражений: ID -> Expression
	Tasks           map[int]*models.Task          // Карта задач: ID -> Task
	Results         map[int]float64               // Карта результатов: task_id -> result
	ReadyTasks      []models.Task                 // Очередь готовых к выполнению задач
	ProcessingTasks map[int]bool                  // Карта задач в обработке: task_id -> true
	TaskToExpr      map[int]string                // Связь задачи с выражением
	mu              sync.Mutex
	taskCounter     int
	exprCounter     int
}

// Manager глобальный экземпляр TaskManager
var Manager = TaskManager{
	Expressions:     make(map[string]*models.Expression),
	Tasks:           make(map[int]*models.Task),
	Results:         make(map[int]float64),
	ReadyTasks:      []models.Task{},
	ProcessingTasks: make(map[int]bool),
	TaskToExpr:      make(map[int]string),
}

// Глобальный мьютекс для синхронизации доступа к UpdateExpressions
var globalMutex sync.Mutex

// GetExpressions возвращает карту выражений
func GetExpressions() map[string]*models.Expression {
	return Manager.Expressions
}

// GetTasks возвращает карту задач
func GetTasks() map[int]*models.Task {
	return Manager.Tasks
}

// GetReadyTasks возвращает список готовых задач
func GetReadyTasks() []models.Task {
	return Manager.ReadyTasks
}

// GetResults возвращает карту результатов
func GetResults() map[int]float64 {
	return Manager.Results
}

// GetProcessingTasks возвращает карту задач в обработке
func GetProcessingTasks() map[int]bool {
	return Manager.ProcessingTasks
}

// GetTaskToExpr возвращает карту соответствия задач и выражений
func GetTaskToExpr() map[int]string {
	return Manager.TaskToExpr
}

// isResultRef проверяет, является ли аргумент ссылкой на результат
func isResultRef(arg string) bool {
	return strings.HasPrefix(arg, "result")
}

// isTaskProcessing проверяет, обрабатывается ли задача
func isTaskProcessing(taskID int) bool {
	_, exists := Manager.ProcessingTasks[taskID]
	return exists
}

// isTaskReady проверяет, готова ли задача к выполнению
func isTaskReady(task models.Task) bool {
	// Проверяем аргументы - если это ссылки на результаты других задач,
	// то проверяем, посчитаны ли эти результаты

	ready := true

	// Проверяем первый аргумент
	if isResultRef(task.Arg1) {
		resultID, err := strconv.Atoi(strings.TrimPrefix(task.Arg1, "result"))
		if err != nil {
			log.Printf("Ошибка конвертации ID результата: %s, %v", task.Arg1, err)
			return false
		}
		_, exists := Manager.Results[resultID]
		if !exists {
			ready = false
		}
	}

	// Проверяем второй аргумент
	if isResultRef(task.Arg2) {
		resultID, err := strconv.Atoi(strings.TrimPrefix(task.Arg2, "result"))
		if err != nil {
			log.Printf("Ошибка конвертации ID результата: %s, %v", task.Arg2, err)
			return false
		}
		_, exists := Manager.Results[resultID]
		if !exists {
			ready = false
		}
	}

	return ready
}

// updateExpressions обновляет статусы выражений
func updateExpressions() {
	log.Println("Обновление статусов выражений")

	for exprID, expr := range Manager.Expressions {
		// Пропускаем уже завершенные выражения
		if expr.Status == "completed" || expr.Status == "error" {
			continue
		}

		// Проверяем, остались ли невыполненные задачи для этого выражения
		tasksRemain := false
		for taskID, id := range Manager.TaskToExpr {
			if id == exprID {
				if _, ok := Manager.Tasks[taskID]; ok {
					tasksRemain = true
					log.Printf("Для выражения %s остались невыполненные задачи", exprID)
					break
				}
			}
		}

		// Если все задачи выполнены, то устанавливаем статус "completed"
		if !tasksRemain {
			log.Printf("Все задачи для выражения %s выполнены", exprID)

			// Ищем задачу с финальным результатом
			// Обычно это задача с самым большим ID
			finalTaskID := 0
			finalResult := 0.0
			finalFound := false

			for taskID, id := range Manager.TaskToExpr {
				if id == exprID && taskID > finalTaskID {
					if result, ok := Manager.Results[taskID]; ok {
						finalTaskID = taskID
						finalResult = result
						finalFound = true
					}
				}
			}

			if finalFound {
				expr.Status = "completed"
				expr.Result = finalResult
				log.Printf("Выражение %s завершено с результатом %f", exprID, finalResult)
			} else {
				log.Printf("Ошибка: не найден финальный результат для выражения %s", exprID)
				expr.Status = "error"
			}
		}
	}
}

// UpdateExpressions экспортируемая функция для обновления статусов выражений
func UpdateExpressions() {
	globalMutex.Lock()
	defer globalMutex.Unlock()
	updateExpressions()
}

// AddExpression добавляет новое выражение и его задачи
func (tm *TaskManager) AddExpression(exprID string, tasks []models.Task) {
	tm.mu.Lock()
	defer tm.mu.Unlock()

	tm.Expressions[exprID] = &models.Expression{ID: exprID, Status: "pending"}
	for _, t := range tasks {
		tm.taskCounter++
		t.ID = tm.taskCounter
		tm.Tasks[t.ID] = &t
		tm.TaskToExpr[t.ID] = exprID // Сохраняем связь задачи с выражением
		if isTaskReady(t) {
			tm.ReadyTasks = append(tm.ReadyTasks, t)
		}
	}
}

// GenerateExpressionID создает новый ID для выражения
func (tm *TaskManager) GenerateExpressionID() string {
	tm.mu.Lock()
	defer tm.mu.Unlock()

	exprID := "expr id: " + strconv.Itoa(tm.exprCounter)
	tm.exprCounter++

	return exprID
}

// GetTask возвращает задачу для выполнения агентом
func (tm *TaskManager) GetTask() (models.Task, bool) {
	tm.mu.Lock()
	defer tm.mu.Unlock()

	if len(tm.ReadyTasks) == 0 {
		return models.Task{}, false
	}
	task := tm.ReadyTasks[0]
	tm.ReadyTasks = tm.ReadyTasks[1:]
	return task, true
}

// AddResult добавляет результат выполнения задачи
func (tm *TaskManager) AddResult(result models.TaskResult) bool {
	tm.mu.Lock()
	defer tm.mu.Unlock()

	if _, exists := tm.Tasks[result.ID]; !exists {
		return false
	}

	log.Printf("TaskManager.AddResult: Получен результат для задачи #%d: %f", result.ID, result.Result)

	// Сохраняем результат
	tm.Results[result.ID] = result.Result

	// Находим ID выражения для этой задачи
	exprID := tm.TaskToExpr[result.ID]
	log.Printf("TaskManager.AddResult: Задача #%d принадлежит выражению %s", result.ID, exprID)

	// Проверяем, есть ли задачи, которые зависят от этого результата
	resultStr := "result" + strconv.Itoa(result.ID)
	log.Printf("TaskManager.AddResult: Проверяем зависимые задачи от результата %s", resultStr)

	// Счетчик зависимых задач для логирования
	dependentTasksCount := 0

	for taskID, taskPtr := range tm.Tasks {
		// Создаем копию задачи
		task := *taskPtr

		// Если задача имеет аргумент, который является результатом текущей задачи
		if task.Arg1 == resultStr || task.Arg2 == resultStr {
			dependentTasksCount++
			log.Printf("TaskManager.AddResult: Задача #%d зависит от результата задачи #%d", taskID, result.ID)

			// Заменяем ссылку на результат на фактическое значение
			if task.Arg1 == resultStr {
				log.Printf("TaskManager.AddResult: Обновление задачи #%d: arg1 изменен с %s на %f",
					taskID, task.Arg1, result.Result)
				task.Arg1 = strconv.FormatFloat(result.Result, 'f', -1, 64)
			}
			if task.Arg2 == resultStr {
				log.Printf("TaskManager.AddResult: Обновление задачи #%d: arg2 изменен с %s на %f",
					taskID, task.Arg2, result.Result)
				task.Arg2 = strconv.FormatFloat(result.Result, 'f', -1, 64)
			}

			// Обновляем задачу
			*taskPtr = task
			log.Printf("TaskManager.AddResult: Задача #%d обновлена: %s %s %s",
				taskID, task.Arg1, task.Operation, task.Arg2)

			// Если теперь задача готова к выполнению, добавляем её в список готовых задач
			log.Printf("TaskManager.AddResult: Проверка готовности задачи #%d после обновления аргументов", taskID)
			if isTaskReady(task) {
				log.Printf("TaskManager.AddResult: Задача #%d теперь готова к выполнению", taskID)
				tm.ReadyTasks = append(tm.ReadyTasks, task)
				log.Printf("TaskManager.AddResult: Задача #%d добавлена в очередь готовых задач", taskID)
			} else {
				log.Printf("TaskManager.AddResult: Задача #%d не готова к выполнению после обновления аргументов", taskID)
			}
		}
	}

	// Удаляем выполненную задачу ПОСЛЕ обработки всех зависимостей
	delete(tm.Tasks, result.ID)

	// Проверяем выражения
	updateExpressions()

	log.Printf("TaskManager.AddResult: Найдено %d зависимых задач от результата задачи #%d",
		dependentTasksCount, result.ID)

	// Дополнительно проверяем количество задач в очереди готовых
	log.Printf("TaskManager.AddResult: Проверка очереди готовых задач:")
	for _, task := range tm.ReadyTasks {
		log.Printf("TaskManager.AddResult: Готовая задача #%d: %s %s %s (выражение %s)",
			task.ID, task.Arg1, task.Operation, task.Arg2, tm.TaskToExpr[task.ID])
	}
	log.Printf("TaskManager.AddResult: Всего в очереди готовых задач: %d", len(tm.ReadyTasks))

	return true
}

// GetExpression возвращает выражение по его ID
func (tm *TaskManager) GetExpression(exprID string) (*models.Expression, bool) {
	tm.mu.Lock()
	defer tm.mu.Unlock()

	expr, exists := tm.Expressions[exprID]
	return expr, exists
}

// GetAllExpressions возвращает список всех выражений
func (tm *TaskManager) GetAllExpressions() []models.Expression {
	tm.mu.Lock()
	defer tm.mu.Unlock()

	exprList := []models.Expression{}
	for _, expr := range tm.Expressions {
		exprList = append(exprList, *expr)
	}
	return exprList
}

// ProcessingTask проверяет, обрабатывается ли задача в данный момент
func (tm *TaskManager) ProcessingTask(taskID int) bool {
	return isTaskProcessing(taskID)
}

// ContainsTask проверяет, содержит ли выражение указанную задачу
func (tm *TaskManager) ContainsTask(exprID string, taskID int) bool {
	return tm.TaskToExpr[taskID] == exprID
}
