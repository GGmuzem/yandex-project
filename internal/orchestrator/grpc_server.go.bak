package orchestrator

import (
	"context"
	"fmt"
	"log"
	"net"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"

	"github.com/GGmuzem/yandex-project/internal/database"
	"github.com/GGmuzem/yandex-project/pkg/calculator"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

// CalculatorServer реализация gRPC сервера оркестратора
type CalculatorServer struct {
	DB         database.Database
	mutex      *sync.Mutex
	tasksMutex *sync.Mutex
}

// NewCalculatorServer создает новый gRPC сервер оркестратора
func NewCalculatorServer(db database.Database, mutex, tasksMutex *sync.Mutex) *CalculatorServer {
	return &CalculatorServer{
		DB:         db,
		mutex:      mutex,
		tasksMutex: tasksMutex,
	}
}

// StartGRPCServer запускает gRPC сервер оркестратора
func StartGRPCServer(db database.Database, mutex, tasksMutex *sync.Mutex) error {
	// Получаем порт из переменной окружения
	port := os.Getenv("GRPC_PORT")
	if port == "" {
		port = "50052" // По умолчанию используем порт 50052
	}

	// Создаем листенер для gRPC сервера
	lis, err := net.Listen("tcp", ":"+port)
	if err != nil {
		return err
	}

	// Создаем gRPC сервер
	grpcServer := grpc.NewServer()

	// Регистрируем сервис оркестратора
	calculatorServer := NewCalculatorServer(db, mutex, tasksMutex)

	// Регистрируем сервер (регистрация должна быть определена в pkg/calculator)
	calculator.RegisterCalculatorServer(grpcServer, calculatorServer)

	// Включаем рефлексию для отладки
	reflection.Register(grpcServer)

	// Запускаем сервер в отдельной горутине
	go func() {
		log.Printf("gRPC сервер запущен на порту :%s", port)
		if err := grpcServer.Serve(lis); err != nil {
			log.Fatalf("Ошибка при запуске gRPC сервера: %v", err)
		}
	}()

	return nil
}

// GetTask - получение задачи агентом
func (s *CalculatorServer) GetTask(ctx context.Context, req *calculator.GetTaskRequest) (*calculator.Task, error) {
	log.Printf("=== ОТЛАДКА SERVER: Получен запрос GetTask от агента ID=%d", req.AgentID)

	// Блокируем доступ к менеджеру задач
	Manager.mu.Lock()
	defer Manager.mu.Unlock()

	// Обновляем очередь готовых задач
	log.Printf("=== ОТЛАДКА SERVER: Проверка и обновление готовых задач")
	for taskID, taskPtr := range Manager.Tasks {
		if !Manager.ProcessingTasks[taskID] {
			task := *taskPtr
			if IsTaskReady(task) {
				// Проверяем, что задача ещё не в очереди
				var found bool
				for _, rt := range Manager.ReadyTasks {
					if rt.ID == task.ID {
						found = true
						break
					}
				}
				if !found {
					log.Printf("=== ОТЛАДКА SERVER: Добавляем задачу #%d в очередь", task.ID)
					Manager.ReadyTasks = append(Manager.ReadyTasks, task)
				}
			}
		}
	}

	log.Printf("=== ОТЛАДКА SERVER: Длина очереди готовых задач: %d", len(Manager.ReadyTasks))

	// Если нет готовых задач, возвращаем ошибку
	if len(Manager.ReadyTasks) == 0 {
		log.Printf("=== ОТЛАДКА SERVER: Нет готовых задач для агента #%d", req.AgentID)
		return nil, fmt.Errorf("нет доступных задач")
	}

	// Выбираем первую задачу из очереди
	task := Manager.ReadyTasks[0]
	// Удаляем её из очереди
	Manager.ReadyTasks = Manager.ReadyTasks[1:]
	// Помечаем как обрабатываемую
	Manager.ProcessingTasks[task.ID] = true

	log.Printf("=== ОТЛАДКА SERVER: Возвращаем задачу #%d агенту #%d", task.ID, req.AgentID)

	// Преобразуем в protobuf формат
	grpcTask := &calculator.Task{
		ID:            int32(task.ID),
		Arg1:          task.Arg1,
		Arg2:          task.Arg2,
		Operation:     task.Operation,
		OperationTime: int32(task.OperationTime),
		ExpressionID:  task.ExpressionID,
	}

	log.Printf("=== ОТЛАДКА SERVER: Возвращаем задачу агенту #%d: ID=%d, %s %s %s", 
		req.AgentID, grpcTask.ID, grpcTask.Arg1, grpcTask.Operation, grpcTask.Arg2)

	return grpcTask, nil
}

// SubmitResult обрабатывает результат задачи от агента
func (s *CalculatorServer) SubmitResult(ctx context.Context, result *calculator.TaskResult) (*calculator.SubmitResultResponse, error) {
	log.Printf("Получен результат для задачи #%d: %f, выражение: %s", result.ID, result.Result, result.ExpressionID)

	// Сохраняем результат в память
	Manager.mu.Lock()
	Manager.Results[int(result.ID)] = result.Result
	log.Printf("Результат задачи #%d сохранен в памяти: %f", result.ID, result.Result)
	Manager.mu.Unlock()

	// Удаляем задачу из списка задач в обработке
	Manager.mu.Lock()
	delete(Manager.ProcessingTasks, int(result.ID))
	delete(Manager.Tasks, int(result.ID))
	Manager.mu.Unlock()

	// Получаем ID выражения
	exprID := result.ExpressionID
	if exprID == "" {
		log.Printf("Задача #%d не имеет связанного выражения", result.ID)
		return &calculator.SubmitResultResponse{
			Success: true,
			Message: "результат обработан",
		}, nil
	}

	// Проверяем, остались ли задачи для этого выражения
	tasksRemain := false
	Manager.mu.Lock()
	for taskID, id := range Manager.TaskToExpr {
		if id == exprID {
			if _, ok := Manager.Tasks[taskID]; ok {
				tasksRemain = true
				log.Printf("Для выражения %s осталась невыполненная задача #%d", exprID, taskID)
				break
			}
		}
	}
	Manager.mu.Unlock()

	if !tasksRemain {
		log.Printf("Для выражения %s не осталось задач, определяем финальный результат", exprID)

		// Находим корневую задачу для этого выражения (результат которой не используется в других задачах)
		var finalTaskID int
		var finalResult float64
		finalFound := false

		// Собираем все задачи с результатами для этого выражения
		type taskWithResult struct {
			id     int
			result float64
		}
		var tasksWithResults []taskWithResult

		// Сначала собираем все задачи с их результатами
		Manager.mu.Lock()
		for taskID, id := range Manager.TaskToExpr {
			if id != exprID {
				continue
			}

			// Проверяем, есть ли результат для этой задачи
			taskResult, resultExists := Manager.Results[taskID]
			if !resultExists {
				log.Printf("Задача #%d не имеет результата", taskID)
				continue
			}

			// Добавляем задачу в список
			tasksWithResults = append(tasksWithResults, taskWithResult{id: taskID, result: taskResult})
			log.Printf("Задача #%d имеет результат %f", taskID, taskResult)
		}

		// Выводим все задачи для отладки
		log.Printf("Все задачи для выражения %s:", exprID)
		for i, task := range tasksWithResults {
			log.Printf("[%d] Задача #%d = %f", i, task.id, task.result)
		}

		// Сортируем задачи по ID в порядке убывания (самый большой ID будет первым)
		sort.Slice(tasksWithResults, func(i, j int) bool {
			return tasksWithResults[i].id > tasksWithResults[j].id
		})

				task, exists := Manager.Tasks[taskID]
				if !exists {
					log.Printf("  Задача #%d не найдена в Manager.Tasks", taskID)
					continue
				}

				// Проверяем зависимости
				if strings.HasPrefix(task.Arg1, "result") {
					sourceTaskID, err := strconv.Atoi(strings.TrimPrefix(task.Arg1, "result"))
					if err == nil {
						usedAsInput[sourceTaskID] = true
						log.Printf("  Задача #%d используется как входной аргумент в задаче #%d (Arg1)", sourceTaskID, taskID)
					}
				}

				if strings.HasPrefix(task.Arg2, "result") {
					sourceTaskID, err := strconv.Atoi(strings.TrimPrefix(task.Arg2, "result"))
					if err == nil {
						usedAsInput[sourceTaskID] = true
						log.Printf("  Задача #%d используется как входной аргумент в задаче #%d (Arg2)", sourceTaskID, taskID)
					}
				}
			}
		}
		Manager.mu.Unlock()

		// Новый подход: создаем граф зависимостей в обратном порядке
		// Теперь мы будем искать задачи, которые не используются в качестве аргументов для других задач
		
		// Создаем множество задач, чьи результаты используются в других задачах
		usedAsInput := make(map[int]bool)
		
		// Проходим по всем задачам и проверяем их аргументы
		Manager.mu.Lock()
		for taskID, expressionID := range Manager.TaskToExpr {
			if expressionID != exprID {
				continue
			}
			
			task, exists := Manager.Tasks[taskID]
			if !exists {
				continue
			}
			
			// Проверяем Arg1
			if strings.HasPrefix(task.Arg1, "result") {
				sourceTaskID, err := strconv.Atoi(strings.TrimPrefix(task.Arg1, "result"))
				if err == nil {
					usedAsInput[sourceTaskID] = true
					log.Printf("  Задача #%d используется как входной аргумент в задаче #%d (Arg1)", sourceTaskID, taskID)
				}
			}
			
			// Проверяем Arg2
			if strings.HasPrefix(task.Arg2, "result") {
				sourceTaskID, err := strconv.Atoi(strings.TrimPrefix(task.Arg2, "result"))
				if err == nil {
					usedAsInput[sourceTaskID] = true
					log.Printf("  Задача #%d используется как входной аргумент в задаче #%d (Arg2)", sourceTaskID, taskID)
				}
			}
		}
		Manager.mu.Unlock()
		
		// Выводим задачи, которые используются как входные аргументы
		log.Printf("Задачи, используемые как входные аргументы:")
		for taskID := range usedAsInput {
			log.Printf("  Задача #%d", taskID)
		}
		
		// Теперь ищем задачи, которые не используются как входные аргументы
		var rootCandidates []taskWithResult
		for _, task := range tasksWithResults {
			if !usedAsInput[task.id] {
				rootCandidates = append(rootCandidates, task)
				log.Printf("  Потенциальная корневая задача #%d с результатом %f для выражения %s", task.id, task.result, exprID)
			}
		}

		// Новый подход: создаем граф зависимостей в обратном порядке
		// Теперь мы будем искать задачи, которые не используются в качестве аргументов для других задач
		
		// Создаем множество задач, чьи результаты используются в других задачах
		usedAsInput := make(map[int]bool)
		
		// Проходим по всем задачам и проверяем их аргументы
		Manager.mu.Lock()
		for taskID, expressionID := range Manager.TaskToExpr {
			if expressionID != exprID {
				continue
			}
			
			task, exists := Manager.Tasks[taskID]
			if !exists {
				continue
			}
			
			// Проверяем Arg1
			if strings.HasPrefix(task.Arg1, "result") {
				sourceTaskID, err := strconv.Atoi(strings.TrimPrefix(task.Arg1, "result"))
				if err == nil {
					usedAsInput[sourceTaskID] = true
					log.Printf("  Задача #%d используется как входной аргумент в задаче #%d (Arg1)", sourceTaskID, taskID)
				}
			}
			
			// Проверяем Arg2
			if strings.HasPrefix(task.Arg2, "result") {
				sourceTaskID, err := strconv.Atoi(strings.TrimPrefix(task.Arg2, "result"))
				if err == nil {
					usedAsInput[sourceTaskID] = true
					log.Printf("  Задача #%d используется как входной аргумент в задаче #%d (Arg2)", sourceTaskID, taskID)
				}
			}
		}
		Manager.mu.Unlock()
		
		// Выводим задачи, которые используются как входные аргументы
		log.Printf("Задачи, используемые как входные аргументы:")
		for taskID := range usedAsInput {
			log.Printf("  Задача #%d", taskID)
		}
		
		// Теперь ищем задачи, которые не используются как входные аргументы
		var rootCandidates []taskWithResult
		for _, task := range tasksWithResults {
			if !usedAsInput[task.id] {
				rootCandidates = append(rootCandidates, task)
				log.Printf("  Потенциальная корневая задача #%d с результатом %f для выражения %s", task.id, task.result, exprID)
			}
		}
		
		// Сортируем кандидатов по ID в порядке убывания (самый большой ID будет первым)
		sort.Slice(rootCandidates, func(i, j int) bool {
			return rootCandidates[i].id > rootCandidates[j].id
		})

		// Выбираем задачу с самым большим ID среди корневых кандидатов
		if len(rootCandidates) > 0 {
			finalTaskID = rootCandidates[0].id
			finalResult = rootCandidates[0].result
			finalFound = true
			log.Printf("Найдена корневая задача #%d с результатом %f для выражения %s", finalTaskID, finalResult, exprID)
		} else if len(tasksWithResults) > 0 {
			// Если не нашли корневую задачу, используем задачу с самым большим ID
			// Сортируем задачи по ID в порядке убывания (самый большой ID будет первым)
			sort.Slice(tasksWithResults, func(i, j int) bool {
				return tasksWithResults[i].id > tasksWithResults[j].id
			})
			
			finalTaskID = tasksWithResults[0].id
			finalResult = tasksWithResults[0].result
			finalFound = true
			log.Printf("Корневая задача не найдена, выбрана задача с самым большим ID #%d с результатом %f для выражения %s", finalTaskID, finalResult, exprID)
		}

		// Если нашли финальный результат, обновляем выражение
		if finalFound {
			// Обновляем выражение в памяти
			Manager.mu.Lock()
			if expr, ok := Manager.Expressions[exprID]; ok {
				expr.Status = "completed"
				expr.Result = finalResult
				log.Printf("Обновлено выражение %s в памяти: статус=completed, результат=%f", exprID, finalResult)
			} else {
				log.Printf("Выражение %s не найдено в памяти", exprID)
			}
			Manager.mu.Unlock()

			// Обновляем выражение в БД
			if err := s.DB.UpdateExpressionStatus(exprID, "completed", finalResult); err != nil {
				log.Printf("Ошибка при обновлении выражения %s в БД: %v", exprID, err)
			} else {
				log.Printf("Успешно обновлено выражение %s в БД: статус=completed, результат=%f", exprID, finalResult)
			}
		} else {
			log.Printf("Не найден финальный результат для выражения %s", exprID)
		}
	}

	return &calculator.SubmitResultResponse{
		Success: true,
		Message: "результат обработан",
	}, nil
}